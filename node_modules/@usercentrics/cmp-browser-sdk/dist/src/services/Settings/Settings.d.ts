import { AggregatedServices, BaseCategory, BaseService, Category, DataExchangeSetting, LegacySettings, Service, Settings, UserDecision } from './interfaces';
import { CONSENT_STATUS } from './enums';
import { CcpaOptions, TCFOptions } from './models';
import { DataTransferSettings } from '../../modules/helpers';
import { UI_VARIANT } from '../../interfaces';
export default class SettingsService {
    legacySettings: LegacySettings | null;
    isAggregatorLoaded: boolean;
    isVariantLoaded: boolean;
    allLegacyServicesHaveName: boolean;
    private acceptAllImplicitlyOnInit;
    private botInstance;
    private controllerIdInstance;
    private static instance;
    private locationInstance;
    private settings;
    private constructor();
    static getInstance(): SettingsService;
    static resetInstance(): void;
    getBaseSettings(): Settings;
    getCategories(): Category[];
    getCategoriesBaseInfo(): BaseCategory[];
    getCategoriesFullInfo(variant: UI_VARIANT): Promise<Category[]>;
    getCategoryBySlug(categorySlug: string): Category | undefined;
    getControllerId(): string;
    setControllerId(value: string): void;
    getCcpaSettings(): CcpaOptions | null;
    getDataExchangeSettings(): DataExchangeSetting[];
    getDataTransferSettings(): DataTransferSettings;
    updateDataTransferSettings(value: DataTransferSettings): void;
    getEssentialCategories(): Category[];
    getGoogleConsentMode(): boolean;
    getNonEssentialCategories(): Category[];
    getServices(): Service[];
    mapBaseServices(services: Service[]): BaseService[];
    getServicesBaseInfo(): BaseService[];
    getServicesFullInfo(variant: UI_VARIANT): Promise<Service[]>;
    areAllServicesAccepted(): boolean;
    areAllVendorsAndPurposesAccepted(): boolean;
    getServicesFromCategories(categories: Category[]): Service[];
    getServicesWithConsent(): Service[];
    getSettings(): Settings;
    getTCFOptions(): TCFOptions | null;
    /**
     * Only exists on service-specific TC
     *
     * true - Purpose 1 not disclosed at all. CMPs use PublisherCC to
     * indicate the publisher's country of establishment to help Vendors
     * determine whether the vendor requires Purpose 1 consent.
     *
     * false - There is no special Purpose 1 treatment status. Purpose 1 was
     * disclosed normally (consent) as expected by TCF Policy
     */
    getTCFPurposeOneTreatment(): boolean;
    getTCFStackIds(): number[];
    getTCFVendorIds(): number[];
    getSettingsVersion(): string;
    isCcpaEnabled(): boolean;
    isCcpaAvailable(): boolean;
    isInteractionAnalyticsEnabled(): boolean;
    isTagLoggerActive(): boolean;
    isTcfEnabled(): boolean;
    isTcfAvailable(): boolean;
    isTcfHistoryV2Disabled(): boolean;
    isCrossDomainEnabled(): boolean;
    setCategories(categories: Category[]): void;
    setTCFIsServiceSpecific(isServiceSpecific: boolean): void;
    setSettings(settings: Settings): void;
    initSettings(legacySettings: LegacySettings, variant: UI_VARIANT): void;
    updateSettingsVariants(variant: UI_VARIANT): Promise<void>;
    updateSettingsCategories(variant: UI_VARIANT): Promise<void>;
    fetchAggregatedServices(legacySettings: LegacySettings): Promise<AggregatedServices | null>;
    mergeServicesIntoExistingCategories(updatedServices: Service[]): Category[];
    shouldAcceptAllImplicitlyOnInit(): Promise<boolean>;
    shouldShowFirstLayerOnVersionChange(): boolean;
    updateServicesWithConsent(status: CONSENT_STATUS): Service[];
    /**
     * We always return the the services with the updated status (even if there is no change)
     */
    updateServicesWithDecisions(decisions: UserDecision[]): Service[];
}
