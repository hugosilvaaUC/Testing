import { BaseButtons, BaseFirstLayer, BaseSecondLayer, Consent, DefaultButtonProps, ServiceLegalBasis } from './interfaces.ui';
import { CcpaOptions, CcpaUISettings, DefaultUISettings, TCFOptions, TCFUISettings } from '../models';
import { DataExchangeSetting, DeviceStorage } from '.';
import { FIRST_LAYER_VARIANT, SECOND_LAYER_SIDE, SECOND_LAYER_VARIANT, VERSION } from '../enums';
export interface DataDistribution {
    processingLocation: string;
    thirdPartyCountries: string;
}
export interface Language {
    available: string[];
    selected: string;
}
export interface ProcessingCompany {
    address: string;
    dataProtectionOfficer: string;
    name: string;
}
export interface URLs {
    cookiePolicy: string;
    dataProcessingAgreement: string;
    optOut: string;
    privacyPolicy: string;
}
export interface ExtendedService {
    cookieMaxAgeSeconds: number | null;
    cookieRefresh: boolean | null;
    dataCollected: string[];
    dataDistribution: DataDistribution | null;
    dataProtectionOfficer: string | null;
    dataPurposes: string[];
    dataRecipients: string[];
    description: string | null;
    deviceStorage: DeviceStorage | null;
    deviceStorageDisclosureUrl: string | null;
    language: Language | null;
    legalBasis: ServiceLegalBasis[];
    processingCompany: ProcessingCompany | null;
    retentionPeriodDescription: string | null;
    technologiesUsed: string[];
    urls: URLs | null;
    usesCookies: boolean | null;
    usesNonCookieAccess: boolean | null;
}
export interface BaseService {
    categorySlug: string;
    consent: Consent;
    fetchSubServices: () => Promise<Service[]>;
    id: string;
    isEssential: boolean;
    isHidden: boolean;
    name: string;
    processorId: string;
    subServices: Service[];
    subServicesLength: number;
    version: string;
}
export declare type Service = BaseService & ExtendedService;
interface CommonCategory {
    description: string;
    isEssential: boolean;
    isHidden: boolean;
    label: string;
    slug: string;
}
export interface BaseCategory extends CommonCategory {
    services: BaseService[];
}
export interface Category extends CommonCategory {
    services: Service[];
}
export interface Settings {
    acceptAllImplicitlyOutsideEU: boolean;
    categories: Category[];
    ccpa: CcpaOptions | null;
    consentSharingIFrameIsActive: boolean;
    controllerId: string;
    dataExchangeSettings: DataExchangeSetting[];
    googleConsentMode: boolean;
    id: string;
    interactionAnalyticsEnabled: boolean;
    isCcpaEnabled: boolean;
    isTagLoggerActive: boolean;
    isTcfEnabled: boolean;
    reshowBanner: number;
    showFirstLayerOnVersionChange: VERSION[];
    tcf: TCFOptions | null;
    ui: CcpaUISettings | DefaultUISettings | TCFUISettings;
    version: string;
}
export declare type LogoPosition = 'center' | 'left' | 'right';
export interface CcpaButtons extends BaseButtons, ShowSecondLayerButton {
    optOutNotice: {
        label: string;
    };
}
export interface CcpaFirstLayer extends BaseFirstLayer {
    description: {
        default: string;
        short: string;
        showShortDescriptionOnMobile: boolean;
    };
    isLanguageSelectorEnabled: boolean;
    variant: FIRST_LAYER_VARIANT;
}
export interface CcpaSecondLayer extends BaseSecondLayer {
    isLanguageSelectorEnabled: boolean;
    side: SECOND_LAYER_SIDE;
    tabs: {
        categories: {
            isEnabled: boolean;
            label: string;
        };
        services: {
            isEnabled: boolean;
            label: string;
        };
    };
    variant: SECOND_LAYER_VARIANT;
}
export interface DefaultUISecondLayer extends BaseSecondLayer {
    hideButtonDeny: boolean;
    isLanguageSelectorEnabled: boolean;
    hideTogglesForServices: boolean;
    side: SECOND_LAYER_SIDE;
    tabs: {
        categories: {
            /** Currently non-customizable. Value set as: true */
            isEnabled: boolean;
            label: string;
        };
        services: {
            /** Currently non-customizable. Value set as: true */
            isEnabled: boolean;
            /** Currently non-customizable. Value set as: "Services" (non-translated) */
            label: string;
        };
    };
    variant: SECOND_LAYER_VARIANT;
}
export interface DefaultUIFirstLayer extends BaseFirstLayer {
    description: {
        default: string;
        short: string;
        showShortDescriptionOnMobile: boolean;
    };
    isLanguageSelectorEnabled: boolean;
    /** Currently non-customizable. Value set as: FIRST_LAYER_VARIANT.BANNER */
    variant: FIRST_LAYER_VARIANT;
}
export interface Label {
    description: string;
    title: string;
}
export interface LogoCustomization {
    altTag: string | null;
    position: LogoPosition;
    url: string | null;
}
export interface DefaultGeneralLabels {
    back: string;
    consentGiven: string;
    consentNotGiven: string;
    /** Currently non-customizable. Value set as: "Consent type" (translated) */
    consentType: string;
    /** Permanently non-customizable. Value set as: "Controller ID" (translated) */
    controllerId: string;
    copy: string;
    date: string;
    /** Currently non-customizable. Value set as: "Decision" (translated) */
    decision: string;
    details: string;
    /** Currently non-customizable. Value set as: "Explicit" (translated) */
    explicit: string;
    /** Currently non-customizable. Value set as: "Implicit" (translated) */
    implicit: string;
    implicitNo: string;
    implicitYes: string;
    /** Currently non-customizable. Value set as: "Show more" (translated) */
    showMore: string;
    subservice: string;
    subservices: string;
    subservicesDescription: string;
}
export interface DefaultServiceLabels {
    dataCollected: Label;
    dataDistribution: {
        processingLocationDescription: string;
        processingLocationTitle: string;
        thirdPartyCountriesDescription: string;
        thirdPartyCountriesTitle: string;
    };
    dataProtectionOfficer: Label;
    dataPurposes: Label;
    dataRecipients: Label;
    descriptionTitle: string;
    history: {
        /** Currently non-customizable. Value set as: null */
        description: string | null;
        title: string;
    };
    legalBasis: Label;
    processingCompanyTitle: string;
    retentionPeriod: Label;
    technologiesUsed: Label;
    urls: {
        cookiePolicyTitle: string;
        optOutTitle: string;
        privacyPolicyTitle: string;
    };
}
export interface DefaultUIButtons {
    acceptAll: DefaultButtonProps;
    denyAll: DefaultButtonProps;
}
export interface ShowSecondLayerButton {
    showSecondLayer: {
        isEnabled: boolean;
        label: string;
        url: string | null;
    };
}
export interface DefaultTCFGeneralLabels {
    features: string;
    iabVendors: string;
    nonIabPurposes: string;
    nonIabVendors: string;
    purposes: string;
}
export {};
