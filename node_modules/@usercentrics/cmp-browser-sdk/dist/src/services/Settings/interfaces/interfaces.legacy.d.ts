import { FIRST_LAYER_VARIANT, LEGACY_CCPA_REGION, LEGACY_DATA_EXCHANGE_TYPE, LEGACY_VERSION, SECOND_LAYER_SIDE, SECOND_LAYER_TRIGGER, SECOND_LAYER_VARIANT, TCF_SCOPE } from '../enums';
export interface LegacyTCF2ChangedPurposes {
    purposes: number[];
    legIntPurposes: number[];
}
export interface LegacyBackgroundOverlay {
    darken: number;
    target: number[];
}
export interface LegacyBaseService {
    description: string;
    templateId: string;
    version: string;
}
export interface LegacyCategory {
    categorySlug: string;
    description: string;
    isEssential: boolean;
    isHidden: boolean;
    label: string;
}
export interface LegacyCcpa {
    iabAgreementExists: boolean;
    isActive: boolean;
    region: LEGACY_CCPA_REGION;
    reshowAfterDays: number;
    showOnPageLoad: boolean;
    firstLayerTitle: string;
    firstLayerDescription: string;
    firstLayerMobileDescriptionIsActive: boolean;
    firstLayerMobileDescription: string;
    firstLayerVariant: FIRST_LAYER_VARIANT;
    firstLayerHideLanguageSwitch: boolean;
    secondLayerTitle: string;
    secondLayerDescription: string;
    secondLayerSide: SECOND_LAYER_SIDE;
    secondLayerVariant: SECOND_LAYER_VARIANT;
    secondLayerHideLanguageSwitch: boolean;
    btnSave: string;
    optOutNoticeLabel: string;
}
export interface LegacyDataExchangeSetting {
    names: string[];
    type: LEGACY_DATA_EXCHANGE_TYPE;
}
export declare type LegalBasis = string;
export declare type LegalBasisId = string;
export interface LegalBasisTranslation {
    [key: string]: string;
}
export interface LegacyAriaLabelsTranslations {
    acceptAllButton: string;
    ccpaButton: string;
    ccpaMoreInformation: string;
    closeButton: string;
    collapse: string;
    cookiePolicyButton: string;
    copyControllerId: string;
    denyAllButton: string;
    expand: string;
    fullscreenButton: string;
    imprintButton: string;
    languageSelector: string;
    privacyButton: string;
    privacyPolicyButton: string;
    saveButton: string;
    serviceInCategoryDetails: string;
    servicesInCategory: string;
    tabButton: string;
    usercentricsCMPButtons: string;
    usercentricsCMPContent: string;
    usercentricsCMPHeader: string;
    usercentricsCMPUI: string;
    usercentricsCard: string;
    usercentricsList: string;
    vendorConsentToggle: string;
    vendorDetailedStorageInformation: string;
    vendorLegIntToggle: string;
}
export declare type AriaLabelsTranslation = LegacyAriaLabelsTranslations;
export interface LegacyLabelsTranslations {
    BACK: string;
    COOKIE_REFRESH: string;
    COOKIE_STORAGE: string;
    DETAILS: string;
    SUB_SERVICE: string;
    SUB_SERVICES: string;
    SUB_SERVICES_DESCRIPTION: string;
}
export interface Translations {
    labels: LegacyLabelsTranslations;
    labelsAria: LegacyAriaLabelsTranslations;
    legalBasis: LegalBasisTranslation;
}
export declare enum DisclosureType {
    COOKIE = 0,
    WEB = 1,
    APP = 2
}
export interface Disclosure {
    identifier: string;
    name: string | null;
    description: string | null;
    type: DisclosureType;
    maxAgeSeconds: number | null;
    cookieRefresh: boolean | null;
    domain: string | null;
    purposes: number[] | null;
}
export interface DeviceStorage {
    disclosures: Disclosure[];
}
export interface LegacyHashService extends LegacyBaseService {
    addressOfProcessingCompany: string;
    cookieMaxAgeSeconds: number | null;
    cookieRefresh: boolean | null;
    cookiePolicyURL: string;
    dataCollectedList: string | string[];
    dataProtectionOfficer: string;
    dataProcessor: string;
    dataProcessors: string[];
    dataPurposes: string[];
    dataPurposesList: string | string[];
    dataRecipientsList: string | string[];
    descriptionOfService: string;
    deviceStorage: DeviceStorage | null;
    deviceStorageDisclosureUrl: string | null;
    language: string;
    languagesAvailable: string[];
    legalBasisList: string[];
    legalGround: string;
    linkToDpa: string;
    locationOfProcessing: string;
    nameOfProcessingCompany: string;
    optOutUrl: string;
    policyOfProcessorUrl: string;
    privacyPolicyURL: string;
    processingCompany: string;
    retentionPeriodDescription: string;
    retentionPeriodList: string[];
    technologyUsed: string | string[];
    thirdCountryTransfer: string;
    usesCookies: boolean | null;
    usesNonCookieAccess: boolean | null;
}
export interface LegacyService extends LegacyBaseService {
    _meta?: {
        name: string;
    };
    categorySlug: string;
    defaultConsentStatus: boolean;
    disableLegalBasis: boolean;
    isDeactivated: boolean;
    isHidden: boolean;
    legalBasisList?: LegalBasisId[];
    subConsents?: LegacyService[];
}
export interface LegacyCustomizationFont {
    family: string;
    size: number;
}
export interface LegacyCustomizationSettings {
    borderRadiusButton?: string | number;
    borderRadiusLayer?: string | number;
    color: {
        acceptBtnBackground: string;
        acceptBtnText: string;
        denyBtnBackground: string;
        denyBtnText: string;
        layerBackground?: string;
        linkFont?: string;
        linkIcon?: string;
        moreBtnBackground: string;
        moreBtnText: string;
        overlay?: string;
        primary: string;
        privacyButtonBackground?: string;
        privacyButtonIcon?: string;
        saveBtnBackground: string;
        saveBtnText: string;
        secondLayerTab: string;
        text?: string;
        toggleActiveBackground?: string;
        toggleActiveIcon?: string;
        toggleDisabledBackground?: string;
        toggleDisabledIcon?: string;
        toggleInactiveBackground?: string;
        toggleInactiveIcon?: string;
    } | null;
    font: LegacyCustomizationFont | null;
    logoAltTag: string | null;
    logoUrl: string | null;
    overlayOpacity?: number;
    privacyButtonSizeDesktop?: number;
    privacyButtonSizeMobile?: number;
    useBackgroundShadow?: boolean;
}
export declare enum FIRST_LAYER_LOGO_POSITION {
    LEFT = "LEFT",
    CENTER = "CENTER",
    RIGHT = "RIGHT"
}
export interface TestVariant {
    [key: string]: Record<string, unknown>;
}
export interface LegacyFeatures {
    customCss?: boolean;
}
export interface LegacySettings {
    backgroundOverlay: LegacyBackgroundOverlay[];
    bannerMessage: string;
    bannerMobileDescription: string;
    bannerMobileDescriptionIsActive: boolean;
    btnDenyIsVisible: boolean;
    btnMoreInfoActionSelection: number;
    btnMoreInfoIsVisible: boolean;
    buttonDisplayLocation: string;
    buttonPrivacyOpenIconUrl: string | null;
    categories: LegacyCategory[];
    ccpa: LegacyCcpa;
    consentTemplates: LegacyService[];
    consentSharingIFrameIsActive: boolean;
    cookiePolicyUrl: string | null;
    customization?: LegacyCustomizationSettings;
    dataExchangeOnPage: LegacyDataExchangeSetting[];
    displayOnlyForEU: boolean;
    enablePoweredBy: boolean;
    enableBotDetection: boolean;
    features?: LegacyFeatures;
    firstLayer: {
        hideButtonDeny: boolean;
        hideLanguageSwitch: boolean;
        isCategoryTogglesEnabled: boolean;
        isOverlayEnabled: boolean;
        logoPosition?: FIRST_LAYER_LOGO_POSITION;
        secondLayerTrigger?: SECOND_LAYER_TRIGGER;
        variant: FIRST_LAYER_VARIANT;
    };
    googleConsentMode: boolean;
    imprintUrl: string;
    interactionAnalytics: boolean;
    labels: LegacyLabels;
    language: string;
    languagesAvailable: string[];
    moreInfoButtonUrl: string;
    partnerPoweredByUrl: string;
    privacyButtonIsVisible: boolean;
    privacyPolicyUrl: string;
    reshowBanner: number | null;
    secondLayer: {
        hideButtonDeny: boolean;
        hideLanguageSwitch: boolean;
        isOverlayEnabled: boolean;
        hideTogglesForServices: boolean | null;
        side: SECOND_LAYER_SIDE;
        tabsCategoriesLabel: string;
        tabsCategoriesIsEnabled: boolean;
        tabsServicesIsEnabled: boolean;
        tabsServicesLabel: string;
        variant: SECOND_LAYER_VARIANT;
    };
    showLanguageDropdown: boolean;
    showCookieInformation: boolean;
    settingsId: string;
    showInitialViewForVersionChange: LEGACY_VERSION[];
    stylesCss?: string | null;
    tagLoggerIsActive: boolean;
    tcf2: LegacyTCF2;
    tcf2Enabled: boolean;
    testVariants?: TestVariant;
    useUnsafeCustomCss?: boolean;
    version: string;
}
export interface LegacyLabels {
    accepted: string;
    anyDomain: string;
    back: string;
    btnAcceptAll: string;
    btnBannerReadMore: string;
    btnDeny: string;
    btnMore: string;
    btnSave: string;
    categories: string;
    cookiePolicyInfo: string;
    cookiePolicyLinkText: string | null;
    copy: string;
    consentType: string;
    dataCollectedInfo: string;
    dataCollectedList: string;
    dataRecipientsList: string;
    dataRecipientsListInfo: string;
    dataProtectionOfficer: string;
    dataProtectionOfficerInfo: string;
    dataPurposes: string;
    dataPurposesInfo: string;
    date: string;
    day: string;
    days: string;
    decision: string;
    denied: string;
    descriptionOfService: string;
    detailedStorageInformation: string;
    details: string;
    domain: string;
    duration: string;
    explicit: string;
    firstLayerTitle: string | null;
    headerCorner: string;
    history: string;
    hour: string;
    hours: string;
    identifier: string;
    implicit: string;
    imprintLinkText: string;
    informationLoadingNotPossible: string;
    legalBasisList: string;
    legalBasisInfo: string;
    loadingStorageInformation: string;
    locationOfProcessing: string;
    locationofProcessingInfo: string;
    maximumAgeCookieStorage: string;
    minute: string;
    minutes: string;
    month: string;
    months: string;
    multipleDomains: string;
    name: string;
    no: string;
    noImplicit: string;
    nonCookieStorage: string;
    optOut: string;
    partnerPoweredByLinkText: string;
    policyOf: string;
    poweredBy: string;
    privacyPolicyLinkText: string;
    processingCompany: string;
    purposes: string | null;
    retentionPeriod: string;
    retentionPeriodInfo: string;
    second: string;
    seconds: string;
    session: string;
    showMore: string;
    storageInformation: string;
    storageInformationDescription: string;
    storedInformation: string;
    storedInformationDescription: string;
    subservice: string;
    subservices: string;
    subservicesDescription: string;
    technologiesUsed: string;
    technologiesUsedInfo: string;
    titleCorner: string;
    transferToThirdCountries: string;
    transferToThirdCountriesInfo: string;
    tryAgain: string;
    type: string;
    year: string;
    years: string;
    yes: string;
    yesImplicit: string;
}
export interface LegacyTCF2 {
    buttonsAcceptAllLabel: string;
    buttonsDenyAllLabel: string;
    buttonsDenyAllIsEnabled: boolean;
    buttonsSaveLabel: string;
    changedPurposes: LegacyTCF2ChangedPurposes;
    cmpId?: number;
    cmpVersion?: number;
    consensuDomain?: string;
    consensuScriptPath?: string;
    disabledSpecialFeatures: number[];
    firstLayerAdditionalInfo: string | null;
    firstLayerDescription: string;
    firstLayerHideButtonDeny: boolean | null;
    firstLayerHideToggles: boolean;
    firstLayerNoteGlobal: string;
    firstLayerNoteService: string;
    firstLayerNoteResurface: string | null;
    firstLayerShowDescriptions: boolean;
    firstLayerTitle: string;
    gdprApplies: boolean;
    hideLegitimateInterestToggles: boolean;
    hideNonIabOnFirstLayer: boolean;
    labelsActivateAllVendors: string;
    labelsDisclaimer: string;
    labelsFeatures: string;
    labelsIabVendors: string;
    labelsNonIabPurposes: string;
    labelsNonIabVendors: string;
    labelsPurposes: string;
    linksManageSettingsLabel: string;
    linksVendorListLinkLabel: string;
    publisherCountryCode: string;
    purposeOneTreatment: boolean;
    privacyPolicyLinkText: string;
    resurfaceIABLegalBasisChanged: boolean;
    resurfaceVendorAdded: boolean;
    resurfacePurposeChanged: boolean;
    resurfacePeriodEnded: boolean;
    secondLayerDescription: string;
    secondLayerHideButtonDeny: boolean | null;
    secondLayerTitle: string;
    secondLayerHideToggles: boolean;
    selectedVendorIds: number[];
    selectedStacks: number[];
    showCookieInformation: boolean;
    scope: TCF_SCOPE;
    tabsPurposeLabel: string;
    tabsVendorsLabel: string;
    tcfv2HistoryDisabled: boolean;
    togglesConsentToggleLabel: string;
    togglesLegIntToggleLabel: string;
    togglesSpecialFeaturesToggleOff: string;
    togglesSpecialFeaturesToggleOn: string;
    vendorFeatures: string;
    vendorLegitimateInterestPurposes: string;
    vendorPurpose: string;
    vendorSpecialFeatures: string;
    vendorSpecialPurposes: string;
    vendorToggleAll: boolean;
}
