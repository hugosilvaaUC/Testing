import { DataTransferSettings } from '../../modules/helpers';
import { StorageCcpa, StorageConsentsBuffer, StorageService as StorageServiceInterface, StorageSettings, StorageTCF, StorageTCFVendorsDisclosed } from './interfaces';
import { Consents } from '../Api/interfaces';
import { GVL } from '@iabtcf/core';
import { LegacyStorageData } from './interfaces/interfaces.migration.legacy';
import { Service } from '../SettingsV2/interfaces';
import { UserCountryResponse } from '../Location/interfaces';
export declare type Maybe<T> = T | null | undefined;
export default class StorageService {
    localStorage: null | Storage;
    sessionStorage: null | Storage;
    private static instance;
    private constructor();
    static getInstance(): StorageService;
    static resetInstance(): void;
    init(): void;
    storeServiceIdToNameMapping: boolean;
    static appendToConsentsBuffer(consents: Consents): void;
    static clearOnNewSettingsId(settingsId: string): void;
    static removeConsentsBufferItem(storageConsentsBuffer: StorageConsentsBuffer): void;
    static getCcpaString(): string;
    static getCcpaData(): StorageCcpa | null;
    static fetchConsentsBuffer(): StorageConsentsBuffer[];
    static fetchControllerId(): string;
    static fetchLanguage(): string;
    static fetchServices(): StorageServiceInterface[];
    static fetchLegacySettings(): LegacyStorageData;
    static fetchSettings(): StorageSettings;
    static fetchSettingsId(): string;
    static fetchSettingsVersion(): string;
    static fetchTCFData(): StorageTCF;
    static fetchTCFVendorsDisclosedObject(gvlData?: Maybe<Pick<GVL, 'features' | 'vendors' | 'purposes' | 'specialFeatures' | 'specialPurposes'>>): StorageTCFVendorsDisclosed;
    static fetchTCString(): string;
    static fetchUserActionPerformed(): boolean;
    static fetchUserCountryResponse(): UserCountryResponse | null;
    static setUserCountryResponse(userCountryResponse: UserCountryResponse): void;
    static mapServices(services: Pick<Service, 'consent' | 'id' | 'processorId'>[]): StorageServiceInterface[];
    static mapSettings(dataTransferSettings: DataTransferSettings, services: Pick<Service, 'consent' | 'id' | 'processorId'>[]): StorageSettings;
    /**
     * Migrating the Legacy Settings (from Vanilla app) to the Browser SDK as part of the EUD-47
     * If the settings exists, meaning a consent has been given prior to that, the whole migration is skipped.
     * If not, before try to migrate any data it's checked if there is anything to be migrated.
     * If so, the migration starts and maps all the old data into the new format
     * If successful, the migrated data is saved into the local storage.
     * Lastly, in any case the legacy data is removed.
     */
    static migrateLegacySettings(settingsId: string): void;
    static saveSettings(settings: StorageSettings, services?: Pick<Service, 'id' | 'name'>[]): void;
    static saveTCFData(tcfData: StorageTCF): void;
    static saveTCString(tcString: string): void;
    static setCcpaTimeStamp(): void;
    static getCcpaTimeStamp(): number;
    static setCcpaCookie(ccpaString: string): void;
    static settingsExist(): boolean;
    static setUserActionPerformed(): void;
    static clearCcpa(): void;
    static clearCcpaData(): void;
    static clearTcf(): void;
    private static clear;
    static clearAll(): Promise<void>;
    private static clearLegacySettings;
    private static getCookie;
    private static setCookie;
}
