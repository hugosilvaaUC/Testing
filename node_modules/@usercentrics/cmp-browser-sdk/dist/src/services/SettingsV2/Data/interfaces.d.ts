import { Consent, ResurfaceOptions, TCFChangedPurposes } from '../../Settings/interfaces';
import { DataDistribution, DeviceStorage, Language, ProcessingCompany, TCFData, TCFUserDecisions, TCF_DECISION_UI_LAYER, URLs } from '../../..';
import { LEGACY_CCPA_REGION } from '../../Settings/enums';
import { STRING_CHARACTER } from '../../Settings/models/Ccpa/enums/enums';
import { Service } from '../interfaces';
export interface ExtendedServiceData {
    cookieMaxAgeSeconds: number | null;
    cookieRefresh: boolean | null;
    dataCollected: string[];
    dataDistribution: DataDistribution | null;
    dataProtectionOfficer: string | null;
    dataPurposes: string[];
    dataRecipients: string[];
    deviceStorage: DeviceStorage | null;
    deviceStorageDisclosureUrl: string | null;
    language: Language | null;
    processingCompany: ProcessingCompany | null;
    retentionPeriodDescription: string | null;
    technologiesUsed: string[];
    urls: URLs | null;
    usesCookies: boolean | null;
    usesNonCookieAccess: boolean | null;
}
export interface BaseServiceData {
    categorySlug: string;
    consent: Consent;
    fetchSubServices: () => Promise<Service[]>;
    id: string;
    isEssential: boolean;
    isHidden: boolean;
    processorId: string;
    subServices: ServiceData[];
    subServicesLength: number;
    version: string;
}
export declare type ServiceData = BaseServiceData & ExtendedServiceData;
export interface BaseCategoryData {
    isEssential: boolean;
    isHidden: boolean;
    services: BaseServiceData[];
    slug: string;
}
export interface CategoryData {
    isEssential: boolean;
    isHidden: boolean;
    services: ServiceData[];
    slug: string;
}
export interface DefaultData {
    categories: CategoryData[];
    controllerId: string;
}
export interface CcpaData extends DefaultData {
    iabAgreementExists: boolean;
    isActive: boolean;
    isOptedOut?: boolean;
    region: LEGACY_CCPA_REGION;
    reshowAfterDays: number;
    showOnPageLoad: boolean;
    getIsOptedOut: () => boolean;
    setCcpaStorage: (isOptedOut: boolean, isNoticeGiven?: STRING_CHARACTER) => void;
    setIsOptedOut: (optedOut: boolean | string) => void;
}
export interface TcfData extends DefaultData {
    acceptAllDisclosed: (fromLayer: TCF_DECISION_UI_LAYER) => Promise<void>;
    areAllPurposesAccepted: () => boolean;
    areAllVendorsAccepted: () => boolean;
    changedPurposes: TCFChangedPurposes;
    changeLanguage: (language: string) => Promise<void>;
    cmpId: number;
    cmpVersion: number;
    consensuScriptPath: string;
    consensuSubdomain: string;
    denyAllDisclosed: (fromLayer: TCF_DECISION_UI_LAYER) => Promise<void>;
    disabledSpecialFeatures: number[];
    gdprApplies: boolean;
    getGdprApplies: () => Promise<boolean>;
    getSelectedVendorsIncludeNonDisclosed: () => boolean;
    getTCFData: () => TCFData;
    getTCString: () => string;
    hideLegitimateInterestToggles: boolean;
    init: () => Promise<void>;
    isServiceSpecific: boolean;
    publisherCountryCode: string;
    purposeOneTreatment: boolean;
    resetTcf: () => void;
    resurfaceOptions: ResurfaceOptions;
    setUIAsClosed: () => Promise<void>;
    setUIAsOpen: () => Promise<void>;
    shouldResurfaceUI: () => boolean;
    stackIds: number[];
    tcfv2HistoryDisabled: boolean;
    updateChoices: (decisions: TCFUserDecisions, fromLayer: TCF_DECISION_UI_LAYER) => Promise<void>;
    updateControllerId: (value: string) => void;
    useGranularChoice: boolean;
    vendorIds: number[];
}
export declare type Data = DefaultData | CcpaData | TcfData;
