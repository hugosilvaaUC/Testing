import { DataTransferSettings } from '../../../modules/helpers';
import { LegacySettings, ResurfaceOptions, TCFChangedPurposes } from '../../Settings/interfaces';
import { TCFData, TCFUserDecisions } from '../../..';
import { TCF_DECISION_UI_LAYER } from '../../Settings/models/TCF/enums';
import DefaultData from './DefaultData';
import { TcfData as TcfSettingsData } from './interfaces';
declare class Tcf extends DefaultData implements TcfSettingsData {
    changedPurposes: TCFChangedPurposes;
    cmpId: number;
    cmpVersion: number;
    consensuScriptPath: string;
    consensuSubdomain: string;
    disabledSpecialFeatures: number[];
    gdprApplies: boolean;
    hideLegitimateInterestToggles: boolean;
    isServiceSpecific: boolean;
    publisherCountryCode: string;
    purposeOneTreatment: boolean;
    resurfaceOptions: ResurfaceOptions;
    stackIds: number[];
    tcfv2HistoryDisabled: boolean;
    useGranularChoice: boolean;
    vendorIds: number[];
    updateControllerId(value: string): void;
    private dataTransferSettings;
    private locationInstance;
    private botInstance;
    private previousStorage;
    private selectedVendorsIncludeNonDisclosed;
    private cmpApi;
    private tcModel;
    private tcfData;
    private vendors;
    private selectedLanguage;
    acceptAllDisclosed(fromLayer: TCF_DECISION_UI_LAYER): Promise<void>;
    areAllPurposesAccepted(): boolean;
    areAllVendorsAccepted(): boolean;
    changeLanguage(language: string): Promise<void>;
    denyAllDisclosed(fromLayer: TCF_DECISION_UI_LAYER): Promise<void>;
    getSelectedVendorsIncludeNonDisclosed(): boolean;
    getTCFData(): TCFData;
    /**
     * If GDPR applies is false, then GDPR applies is set to true in TC String.
     * If GDPR applies is true and user is inside EU, set it to true in TC String.
     * If GDPR applies is true and user is outside EU, set it to false in TC String.
     * (refs EUD-487)
     * */
    getGdprApplies(): Promise<boolean>;
    getTCString(): string;
    init(): Promise<void>;
    setUIAsClosed(): Promise<void>;
    setUIAsOpen(): Promise<void>;
    shouldResurfaceUI(): boolean;
    updateChoices(decisions: TCFUserDecisions, fromLayer: TCF_DECISION_UI_LAYER): Promise<void>;
    resetTcf(): void;
    private applyPurposeRestrictions;
    private cmpApiUpdate;
    private getVendors;
    private initTCModel;
    private resetGVLWithLanguage;
    private resetTcfData;
    private setSelectedVendorsIncludeNonDisclosed;
    private savePurposes;
    private saveSpecialFeatures;
    private saveVendors;
    private setVendors;
    private updateTCString;
    constructor(legacySettings: LegacySettings, dataTransferSettings: DataTransferSettings, controllerId: string);
}
export default Tcf;
