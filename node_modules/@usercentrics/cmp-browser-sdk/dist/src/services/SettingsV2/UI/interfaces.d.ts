import { FIRST_LAYER_VARIANT, SECOND_LAYER_TRIGGER, SECOND_LAYER_VARIANT, TCF_SCOPE, THEME } from '../../..';
export interface ButtonColor {
    backgroundColor: string | null;
    textColor: string | null;
}
export interface ButtonsCustomization {
    accept: ButtonColor;
    borderRadius: string;
    deny: ButtonColor;
    save: ButtonColor;
}
interface FirstLayerCustomization {
    secondLayerTrigger: SECOND_LAYER_TRIGGER;
}
export interface FontCustomization {
    family: string;
    size: number;
}
export interface LayerCustomization {
    backgroundColor: string;
    borderRadius: string;
}
export interface LinkCustomization {
    cookiePolicyUrl: string | null;
    fontColor: string;
    iconColor: string;
    imprintUrl: string;
    privacyPolicyUrl: string;
}
declare type VerticalPosition = 'left' | 'right' | 'center';
export interface LogoCustomization {
    position: VerticalPosition;
    url: string | null;
}
export interface OverlayCustomization {
    backgroundColor: string;
    opacity: number;
}
export interface ToggleCustomization {
    active: {
        backgroundColor: string;
        iconColor: string;
    };
    disabled: {
        backgroundColor: string;
        iconColor: string;
    };
    inactive: {
        backgroundColor: string;
        iconColor: string;
    };
}
interface ButtonsConfig {
    showSecondLayer: boolean;
    secondLayerUrl: string | null;
}
interface DenyAllButton {
    showDenyAll: boolean;
}
export declare type CcpaButtonsConfig = ButtonsConfig & ButtonsCustomization;
export declare type DefaultButtonsConfig = ButtonsConfig & DenyAllButton & ButtonsCustomization;
export interface TCFButtonsConfig extends DenyAllButton, ButtonsCustomization {
    showSave: boolean;
}
export interface PoweredBy {
    partnerUrl: string | null;
    url: string | null;
}
interface FirstLayerConfig {
    isLanguageSelectorEnabled: boolean;
    isOverlayEnabled: boolean;
    showShortDescriptionOnMobile: boolean;
    variant: FIRST_LAYER_VARIANT;
}
export declare type CcpaFirstLayerConfig = FirstLayerConfig & FirstLayerCustomization;
export interface DefaultFirstLayerConfig extends FirstLayerConfig, FirstLayerCustomization {
    hideButtonDeny: boolean;
    isCategoryTogglesEnabled: boolean;
}
export interface TCFFirstLayerConfig extends FirstLayerCustomization {
    hideButtonDeny: boolean;
    hideNonIabPurposes: boolean;
    hideToggles: boolean;
    isOverlayEnabled: boolean;
    showDescriptions: boolean;
}
interface SecondLayerConfig {
    isLanguageSelectorEnabled: boolean;
    isOverlayEnabled: boolean;
    showCategoriesTab: boolean;
    showServicesTab: boolean;
    variant: SECOND_LAYER_VARIANT;
}
export declare type CcpaSecondLayerConfig = SecondLayerConfig;
export interface DefaultSecondLayerConfig extends SecondLayerConfig {
    hideButtonDeny: boolean;
}
export interface TCFSecondLayerConfig {
    hideButtonDeny: boolean;
    hideLegitimateInterestToggles: boolean;
    hideToggles: boolean;
    isOverlayEnabled: boolean;
    showToggleAllVendors: boolean;
}
export interface CommonUI {
    font: FontCustomization;
    layer: LayerCustomization;
    links: LinkCustomization;
    logo: LogoCustomization;
    overlay: OverlayCustomization;
    poweredBy: PoweredBy | null;
    showCookieInformation: boolean;
    textColor: string;
    theme: THEME;
    toggle: ToggleCustomization;
    useBackgroundShadow: boolean;
}
export interface CcpaUI extends CommonUI {
    buttons: CcpaButtonsConfig;
    firstLayer: CcpaFirstLayerConfig;
    secondLayer: CcpaSecondLayerConfig;
}
export interface DefaultUI extends CommonUI {
    buttons: DefaultButtonsConfig;
    firstLayer: DefaultFirstLayerConfig;
    secondLayer: DefaultSecondLayerConfig;
}
export interface TcfUI extends CommonUI {
    buttons: TCFButtonsConfig;
    firstLayer: TCFFirstLayerConfig;
    scope: TCF_SCOPE;
    secondLayer: TCFSecondLayerConfig;
}
export declare type UI = CcpaUI | DefaultUI | TcfUI;
export {};
